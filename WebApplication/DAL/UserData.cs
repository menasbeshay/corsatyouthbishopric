
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Corsat.DAL
{
	public abstract class _UserData : SqlClientEntity
	{
		public _UserData()
		{
			this.QuerySource = "UserData";
			this.MappingName = "UserData";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserDataLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(Guid UserID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.UserID, UserID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserDataLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter UserID
			{
				get
				{
					return new SqlParameter("@UserID", SqlDbType.UniqueIdentifier, 0);
				}
			}
			
			public static SqlParameter FirstName
			{
				get
				{
					return new SqlParameter("@FirstName", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter LastName
			{
				get
				{
					return new SqlParameter("@LastName", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Tele
			{
				get
				{
					return new SqlParameter("@Tele", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Mobile
			{
				get
				{
					return new SqlParameter("@Mobile", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Church
			{
				get
				{
					return new SqlParameter("@Church", SqlDbType.NVarChar, 200);
				}
			}
			
			public static SqlParameter Father
			{
				get
				{
					return new SqlParameter("@Father", SqlDbType.NVarChar, 200);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string UserID = "UserID";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string Tele = "Tele";
            public const string Mobile = "Mobile";
            public const string Church = "Church";
            public const string Father = "Father";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserID] = _UserData.PropertyNames.UserID;
					ht[FirstName] = _UserData.PropertyNames.FirstName;
					ht[LastName] = _UserData.PropertyNames.LastName;
					ht[Tele] = _UserData.PropertyNames.Tele;
					ht[Mobile] = _UserData.PropertyNames.Mobile;
					ht[Church] = _UserData.PropertyNames.Church;
					ht[Father] = _UserData.PropertyNames.Father;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string UserID = "UserID";
            public const string FirstName = "FirstName";
            public const string LastName = "LastName";
            public const string Tele = "Tele";
            public const string Mobile = "Mobile";
            public const string Church = "Church";
            public const string Father = "Father";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[UserID] = _UserData.ColumnNames.UserID;
					ht[FirstName] = _UserData.ColumnNames.FirstName;
					ht[LastName] = _UserData.ColumnNames.LastName;
					ht[Tele] = _UserData.ColumnNames.Tele;
					ht[Mobile] = _UserData.ColumnNames.Mobile;
					ht[Church] = _UserData.ColumnNames.Church;
					ht[Father] = _UserData.ColumnNames.Father;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string UserID = "s_UserID";
            public const string FirstName = "s_FirstName";
            public const string LastName = "s_LastName";
            public const string Tele = "s_Tele";
            public const string Mobile = "s_Mobile";
            public const string Church = "s_Church";
            public const string Father = "s_Father";

		}
		#endregion		
		
		#region Properties
	
		public virtual Guid UserID
	    {
			get
	        {
				return base.GetGuid(ColumnNames.UserID);
			}
			set
	        {
				base.SetGuid(ColumnNames.UserID, value);
			}
		}

		public virtual string FirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual string LastName
	    {
			get
	        {
				return base.Getstring(ColumnNames.LastName);
			}
			set
	        {
				base.Setstring(ColumnNames.LastName, value);
			}
		}

		public virtual string Tele
	    {
			get
	        {
				return base.Getstring(ColumnNames.Tele);
			}
			set
	        {
				base.Setstring(ColumnNames.Tele, value);
			}
		}

		public virtual string Mobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mobile);
			}
			set
	        {
				base.Setstring(ColumnNames.Mobile, value);
			}
		}

		public virtual string Church
	    {
			get
	        {
				return base.Getstring(ColumnNames.Church);
			}
			set
	        {
				base.Setstring(ColumnNames.Church, value);
			}
		}

		public virtual string Father
	    {
			get
	        {
				return base.Getstring(ColumnNames.Father);
			}
			set
	        {
				base.Setstring(ColumnNames.Father, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_UserID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.UserID) ? string.Empty : base.GetGuidAsString(ColumnNames.UserID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.UserID);
				else
					this.UserID = base.SetGuidAsString(ColumnNames.UserID, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_LastName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastName) ? string.Empty : base.GetstringAsString(ColumnNames.LastName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastName);
				else
					this.LastName = base.SetstringAsString(ColumnNames.LastName, value);
			}
		}

		public virtual string s_Tele
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Tele) ? string.Empty : base.GetstringAsString(ColumnNames.Tele);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Tele);
				else
					this.Tele = base.SetstringAsString(ColumnNames.Tele, value);
			}
		}

		public virtual string s_Mobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mobile) ? string.Empty : base.GetstringAsString(ColumnNames.Mobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mobile);
				else
					this.Mobile = base.SetstringAsString(ColumnNames.Mobile, value);
			}
		}

		public virtual string s_Church
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Church) ? string.Empty : base.GetstringAsString(ColumnNames.Church);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Church);
				else
					this.Church = base.SetstringAsString(ColumnNames.Church, value);
			}
		}

		public virtual string s_Father
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Father) ? string.Empty : base.GetstringAsString(ColumnNames.Father);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Father);
				else
					this.Father = base.SetstringAsString(ColumnNames.Father, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter UserID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Tele
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Tele, Parameters.Tele);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mobile, Parameters.Mobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Church
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Church, Parameters.Church);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Father
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Father, Parameters.Father);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public WhereParameter Tele
		    {
				get
		        {
					if(_Tele_W == null)
	        	    {
						_Tele_W = TearOff.Tele;
					}
					return _Tele_W;
				}
			}

			public WhereParameter Mobile
		    {
				get
		        {
					if(_Mobile_W == null)
	        	    {
						_Mobile_W = TearOff.Mobile;
					}
					return _Mobile_W;
				}
			}

			public WhereParameter Church
		    {
				get
		        {
					if(_Church_W == null)
	        	    {
						_Church_W = TearOff.Church;
					}
					return _Church_W;
				}
			}

			public WhereParameter Father
		    {
				get
		        {
					if(_Father_W == null)
	        	    {
						_Father_W = TearOff.Father;
					}
					return _Father_W;
				}
			}

			private WhereParameter _UserID_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _LastName_W = null;
			private WhereParameter _Tele_W = null;
			private WhereParameter _Mobile_W = null;
			private WhereParameter _Church_W = null;
			private WhereParameter _Father_W = null;

			public void WhereClauseReset()
			{
				_UserID_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_Tele_W = null;
				_Mobile_W = null;
				_Church_W = null;
				_Father_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter UserID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.UserID, Parameters.UserID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Tele
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Tele, Parameters.Tele);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mobile, Parameters.Mobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Church
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Church, Parameters.Church);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Father
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Father, Parameters.Father);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter UserID
		    {
				get
		        {
					if(_UserID_W == null)
	        	    {
						_UserID_W = TearOff.UserID;
					}
					return _UserID_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public AggregateParameter Tele
		    {
				get
		        {
					if(_Tele_W == null)
	        	    {
						_Tele_W = TearOff.Tele;
					}
					return _Tele_W;
				}
			}

			public AggregateParameter Mobile
		    {
				get
		        {
					if(_Mobile_W == null)
	        	    {
						_Mobile_W = TearOff.Mobile;
					}
					return _Mobile_W;
				}
			}

			public AggregateParameter Church
		    {
				get
		        {
					if(_Church_W == null)
	        	    {
						_Church_W = TearOff.Church;
					}
					return _Church_W;
				}
			}

			public AggregateParameter Father
		    {
				get
		        {
					if(_Father_W == null)
	        	    {
						_Father_W = TearOff.Father;
					}
					return _Father_W;
				}
			}

			private AggregateParameter _UserID_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _LastName_W = null;
			private AggregateParameter _Tele_W = null;
			private AggregateParameter _Mobile_W = null;
			private AggregateParameter _Church_W = null;
			private AggregateParameter _Father_W = null;

			public void AggregateClauseReset()
			{
				_UserID_W = null;
				_FirstName_W = null;
				_LastName_W = null;
				_Tele_W = null;
				_Mobile_W = null;
				_Church_W = null;
				_Father_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserDataInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserDataUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserDataDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.UserID);
			p.SourceColumn = ColumnNames.UserID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastName);
			p.SourceColumn = ColumnNames.LastName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Tele);
			p.SourceColumn = ColumnNames.Tele;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Mobile);
			p.SourceColumn = ColumnNames.Mobile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Church);
			p.SourceColumn = ColumnNames.Church;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Father);
			p.SourceColumn = ColumnNames.Father;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
